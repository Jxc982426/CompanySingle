<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jxc.dao.SalaryMapper">
  <resultMap id="BaseResultMap" type="com.jxc.pojo.Salary">
    <id column="sno" jdbcType="INTEGER" property="sno" />
    <result column="eno" jdbcType="INTEGER" property="eno" />
    <result column="dno" jdbcType="INTEGER" property="dno" />
    <result column="msal" jdbcType="DOUBLE" property="msal" />
    <result column="ysal" jdbcType="DOUBLE" property="ysal" />
    <result column="award" jdbcType="DOUBLE" property="award" />
    <result column="sgrade" jdbcType="INTEGER" property="sgrade" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    sno, eno, dno, msal, ysal, award, sgrade
  </sql>
  <select id="selectByExample" parameterType="com.jxc.pojo.SalaryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if><if test="startRow != null and pageSize != null and pageSize != 0">
    limit #{startRow}, #{pageSize}
  </if>

  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from salary
    where sno = #{sno,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from salary
    where sno = #{sno,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jxc.pojo.SalaryExample">
    delete from salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jxc.pojo.Salary">
    insert into salary (sno, eno, dno, 
      msal, ysal, award, sgrade
      )
    values (#{sno,jdbcType=INTEGER}, #{eno,jdbcType=INTEGER}, #{dno,jdbcType=INTEGER}, 
      #{msal,jdbcType=DOUBLE}, #{ysal,jdbcType=DOUBLE}, #{award,jdbcType=DOUBLE}, #{sgrade,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jxc.pojo.Salary">
    insert into salary
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="sno != null">
        sno,
      </if>
      <if test="eno != null">
        eno,
      </if>
      <if test="dno != null">
        dno,
      </if>
      <if test="msal != null">
        msal,
      </if>
      <if test="ysal != null">
        ysal,
      </if>
      <if test="award != null">
        award,
      </if>
      <if test="sgrade != null">
        sgrade,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="sno != null">
        #{sno,jdbcType=INTEGER},
      </if>
      <if test="eno != null">
        #{eno,jdbcType=INTEGER},
      </if>
      <if test="dno != null">
        #{dno,jdbcType=INTEGER},
      </if>
      <if test="msal != null">
        #{msal,jdbcType=DOUBLE},
      </if>
      <if test="ysal != null">
        #{ysal,jdbcType=DOUBLE},
      </if>
      <if test="award != null">
        #{award,jdbcType=DOUBLE},
      </if>
      <if test="sgrade != null">
        #{sgrade,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jxc.pojo.SalaryExample" resultType="java.lang.Long">
    select count(*) from salary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update salary
    <set>
      <if test="record.sno != null">
        sno = #{record.sno,jdbcType=INTEGER},
      </if>
      <if test="record.eno != null">
        eno = #{record.eno,jdbcType=INTEGER},
      </if>
      <if test="record.dno != null">
        dno = #{record.dno,jdbcType=INTEGER},
      </if>
      <if test="record.msal != null">
        msal = #{record.msal,jdbcType=DOUBLE},
      </if>
      <if test="record.ysal != null">
        ysal = #{record.ysal,jdbcType=DOUBLE},
      </if>
      <if test="record.award != null">
        award = #{record.award,jdbcType=DOUBLE},
      </if>
      <if test="record.sgrade != null">
        sgrade = #{record.sgrade,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update salary
    set sno = #{record.sno,jdbcType=INTEGER},
      eno = #{record.eno,jdbcType=INTEGER},
      dno = #{record.dno,jdbcType=INTEGER},
      msal = #{record.msal,jdbcType=DOUBLE},
      ysal = #{record.ysal,jdbcType=DOUBLE},
      award = #{record.award,jdbcType=DOUBLE},
      sgrade = #{record.sgrade,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jxc.pojo.Salary">
    update salary
    <set>
      <if test="eno != null">
        eno = #{eno,jdbcType=INTEGER},
      </if>
      <if test="dno != null">
        dno = #{dno,jdbcType=INTEGER},
      </if>
      <if test="msal != null">
        msal = #{msal,jdbcType=DOUBLE},
      </if>
      <if test="ysal != null">
        ysal = #{ysal,jdbcType=DOUBLE},
      </if>
      <if test="award != null">
        award = #{award,jdbcType=DOUBLE},
      </if>
      <if test="sgrade != null">
        sgrade = #{sgrade,jdbcType=INTEGER},
      </if>
    </set>
    where sno = #{sno,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jxc.pojo.Salary">
    update salary
    set eno = #{eno,jdbcType=INTEGER},
      dno = #{dno,jdbcType=INTEGER},
      msal = #{msal,jdbcType=DOUBLE},
      ysal = #{ysal,jdbcType=DOUBLE},
      award = #{award,jdbcType=DOUBLE},
      sgrade = #{sgrade,jdbcType=INTEGER}
    where sno = #{sno,jdbcType=INTEGER}
  </update>
</mapper>